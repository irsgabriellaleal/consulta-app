// Este é o seu arquivo de schema do Prisma
// Saiba mais sobre ele na documentação: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  nome            String
  senha           String?       
  dataNascimento  DateTime
  criadoEm        DateTime      @default(now())
  atualizadoEm    DateTime      @updatedAt
  agendamentos    Agendamento[]
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  planos          UserPlan[]   
  medicamentos   Medicamento[]
}

model Medicamento {
  id          Int       @id @default(autoincrement())
  userId      Int
  nome        String
  dosagem     String
  frequencia  String
  horarios    Json      
  dataInicio  DateTime
  dataFim     DateTime?
  observacoes String?
  status      String    @default("ativo") // ativo, pausado, finalizado
  criadoEm    DateTime  @default(now())
  atualizadoEm DateTime @updatedAt
  usuario     User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Agendamento {
  id              Int      @id @default(autoincrement())
  data            DateTime
  horario         String
  especialidade   String
  nomeMedico      String?
  usuario         User     @relation(fields: [usuarioId], references: [id])
  usuarioId       Int
  precoOriginal   Decimal? @db.Decimal(10,2)
  precoFinal      Decimal? @db.Decimal(10,2)
  criadoEm        DateTime @default(now())
  atualizadoEm    DateTime @updatedAt

  @@index([usuarioId])
}

model Medico {
  id              Int      @id @default(autoincrement())
  nome            String
  especialidade   String
  criadoEm        DateTime @default(now())
  atualizadoEm    DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int      
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Plan {
  id                Int         @id @default(autoincrement())
  nome             String
  preco            Decimal     @db.Decimal(10,2)
  descontoConsulta Int
  beneficios       Json
  isPopular        Boolean     @default(false)
  criadoEm         DateTime    @default(now())
  atualizadoEm     DateTime    @updatedAt
  usuarios         UserPlan[]  
}

model UserPlan {
  id              Int       @id @default(autoincrement())
  userId          Int
  planId          Int
  status          String    // 'active', 'cancelled', 'pending'
  dataInicio      DateTime  @default(now())
  dataFim         DateTime?
  criadoEm        DateTime  @default(now())
  atualizadoEm    DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
  plan            Plan      @relation(fields: [planId], references: [id])

  @@index([userId])
  @@index([planId])
}